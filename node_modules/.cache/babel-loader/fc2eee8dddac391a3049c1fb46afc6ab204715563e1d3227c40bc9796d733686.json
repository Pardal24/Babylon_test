{"ast":null,"code":"import { metrics } from \"../App\";\nexport const transform = (cv, docCanvas, cropPoints, imageResizeRatio, setPreviewPaneDimensions) => {\n  const dst = cv.imread(docCanvas);\n  const bR = cropPoints['right-bottom'];\n  const bL = cropPoints['left-bottom'];\n  const tR = cropPoints['right-top'];\n  const tL = cropPoints['left-top'];\n\n  // create source coordinates matrix\n  const sourceCoordinates = [tL, tR, bR, bL].map(point => [point.x / imageResizeRatio, point.y / imageResizeRatio]);\n  console.log('source_cord: ', sourceCoordinates);\n\n  // get max width\n  const maxWidth = Math.max(bR.x - bL.x, tR.x - tL.x) / imageResizeRatio;\n  // get max height\n  const maxHeight = Math.max(bL.y - tL.y, bR.y - tR.y) / imageResizeRatio;\n\n  // create dest coordinates matrix\n  const destCoordinates = [[0, 0], [metrics.w - 1, 0], [metrics.w - -1, metrics.h], [0, metrics.h]];\n\n  // convert to open cv matrix objects\n  const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...sourceCoordinates));\n  const Md = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...destCoordinates));\n  const transformMatrix = cv.getPerspectiveTransform(Ms, Md);\n  console.log('TM: ', transformMatrix);\n  // set new image size\n  const dsize = new cv.Size(metrics.w, metrics.h); // Utilizar valores input utilizador\n  // perform warp\n  cv.warpPerspective(dst, dst, transformMatrix, dsize, cv.INTER_LINEAR, cv.BORDER_CONSTANT, new cv.Scalar());\n  cv.imshow(docCanvas, dst);\n  dst.delete();\n  Ms.delete();\n  Md.delete();\n  transformMatrix.delete();\n  setPreviewPaneDimensions();\n};","map":{"version":3,"names":["metrics","transform","cv","docCanvas","cropPoints","imageResizeRatio","setPreviewPaneDimensions","dst","imread","bR","bL","tR","tL","sourceCoordinates","map","point","x","y","console","log","maxWidth","Math","max","maxHeight","destCoordinates","w","h","Ms","matFromArray","CV_32FC2","concat","Md","transformMatrix","getPerspectiveTransform","dsize","Size","warpPerspective","INTER_LINEAR","BORDER_CONSTANT","Scalar","imshow","delete"],"sources":["/home/fpardal/Desktop/cropper/src/lib/imgManipulation.js"],"sourcesContent":["import { metrics } from \"../App\";\n\nexport const transform = (\n  cv,\n  docCanvas,\n  cropPoints,\n  imageResizeRatio,\n  setPreviewPaneDimensions\n) => {\n  const dst = cv.imread(docCanvas)\n\n  const bR = cropPoints['right-bottom']\n  const bL = cropPoints['left-bottom']\n  const tR = cropPoints['right-top']\n  const tL = cropPoints['left-top']\n\n  // create source coordinates matrix\n  const sourceCoordinates = [tL, tR, bR, bL].map((point) => [\n    point.x / imageResizeRatio,\n    point.y / imageResizeRatio\n  ])\n  console.log('source_cord: ', sourceCoordinates);\n\n  // get max width\n  const maxWidth = Math.max(bR.x - bL.x, tR.x - tL.x) / imageResizeRatio\n  // get max height\n  const maxHeight = Math.max(bL.y - tL.y, bR.y - tR.y) / imageResizeRatio\n\n  // create dest coordinates matrix\n  const destCoordinates = [\n    [0, 0],\n    [metrics.w- 1, 0],\n    [metrics.w- - 1, metrics.h],\n    [0, metrics.h]\n  ]\n\n  // convert to open cv matrix objects\n  const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...sourceCoordinates))\n  const Md = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...destCoordinates))\n  const transformMatrix = cv.getPerspectiveTransform(Ms, Md)\n  console.log('TM: ', transformMatrix);\n  // set new image size\n  const dsize = new cv.Size(metrics.w, metrics.h) // Utilizar valores input utilizador\n  // perform warp\n  cv.warpPerspective(\n    dst,\n    dst,\n    transformMatrix,\n    dsize,\n    cv.INTER_LINEAR,\n    cv.BORDER_CONSTANT,\n    new cv.Scalar()\n  )\n  cv.imshow(docCanvas, dst)\n\n  dst.delete()\n  Ms.delete()\n  Md.delete()\n  transformMatrix.delete()\n\n  setPreviewPaneDimensions()\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}