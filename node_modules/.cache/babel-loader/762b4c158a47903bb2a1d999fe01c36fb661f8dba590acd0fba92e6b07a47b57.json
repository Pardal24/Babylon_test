{"ast":null,"code":"var _jsxFileName = \"/home/fpardal/Desktop/cropper/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useRef, useState } from 'react';\nimport { Button, Spin, Upload } from 'antd';\nimport { CheckOutlined, PlusOutlined } from '@ant-design/icons';\nimport Cropper from './components/Cropper';\nimport download from 'downloadjs';\nimport './App.css';\nimport Header from './components/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Dragger\n} = Upload;\nconst App = () => {\n  _s();\n  const [cropState, setCropState] = useState();\n  const [img, setImg] = useState();\n  const cropperRef = useRef();\n  const onDragStop = useCallback(s => setCropState(s), []);\n  const onChange = useCallback(s => setCropState(s), []);\n  const doSomething = async () => {\n    console.log('CropState', cropState);\n    try {\n      const res = await cropperRef.current.done({\n        preview: true,\n        filterCvParams: {\n          thMeanCorrection: 13,\n          thMode: window.cv.ADAPTIVE_THRESH_GAUSSIAN_C\n        }\n      });\n      console.log('Cropped and filtered image', res);\n      const blob = await fetch(res.preview).then(r => r.blob());\n      download(blob, 'cropped_image.jpg');\n    } catch (e) {\n      console.log('error', e);\n    }\n  };\n  const onImgSelection = async e => {\n    if (e.fileList && e.fileList.length > 0) {\n      setImg(e.fileList[0].originFileObj);\n    }\n  };\n  const draggerProps = {\n    name: 'file',\n    multiple: false,\n    onChange: onImgSelection\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"root-container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-container\",\n      children: [cropState && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: doSomething,\n          icon: /*#__PURE__*/_jsxDEV(CheckOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 49\n          }, this),\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            cropperRef.current.backToCrop();\n          },\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            setImg(undefined);\n            setCropState();\n          },\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          children: [\"onClick=\", () => {\n            const canvas = cropperRef.current.cropCanvas;\n            if (canvas) {\n              canvas.toBlob(blob => {\n                if (!blob) {\n                  throw new Error('Failed to create blob');\n                }\n                download(blob, 'cropped_image.jpg');\n              });\n            }\n          }, \"Download Crop\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Cropper, {\n        openCvPath: \"./opencv/opencv.js\",\n        ref: cropperRef,\n        image: img,\n        onChange: onChange,\n        onDragStop: onDragStop,\n        maxWidth: window.innerWidth - 10\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), (cropState === null || cropState === void 0 ? void 0 : cropState.loading) && /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 32\n      }, this), !img && /*#__PURE__*/_jsxDEV(Dragger, {\n        ...draggerProps,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"mT3YTIn0tRTYus4yoPHYqJAgjzc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useRef","useState","Button","Spin","Upload","CheckOutlined","PlusOutlined","Cropper","download","Header","jsxDEV","_jsxDEV","Dragger","App","_s","cropState","setCropState","img","setImg","cropperRef","onDragStop","s","onChange","doSomething","console","log","res","current","done","preview","filterCvParams","thMeanCorrection","thMode","window","cv","ADAPTIVE_THRESH_GAUSSIAN_C","blob","fetch","then","r","e","onImgSelection","fileList","length","originFileObj","draggerProps","name","multiple","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","icon","backToCrop","undefined","canvas","cropCanvas","toBlob","Error","openCvPath","ref","image","maxWidth","innerWidth","loading","_c","$RefreshReg$"],"sources":["/home/fpardal/Desktop/cropper/src/App.js"],"sourcesContent":["import React, { useCallback, useRef, useState } from 'react';\nimport { Button, Spin, Upload } from 'antd';\nimport { CheckOutlined, PlusOutlined } from '@ant-design/icons';\nimport Cropper from './components/Cropper';\nimport download from 'downloadjs';\n\nimport './App.css';\nimport Header from './components/Header';\n\nconst { Dragger } = Upload;\n\nconst App = () => {\n  const [cropState, setCropState] = useState();\n  const [img, setImg] = useState();\n  const cropperRef = useRef();\n  \n  const onDragStop = useCallback((s) => setCropState(s), []);\n  const onChange = useCallback((s) => setCropState(s), []);\n\n  const doSomething = async () => {\n    console.log('CropState', cropState);\n    try {\n      const res = await cropperRef.current.done({\n        preview: true,\n        filterCvParams: {\n          thMeanCorrection: 13,\n          thMode: window.cv.ADAPTIVE_THRESH_GAUSSIAN_C\n        }\n      });\n      console.log('Cropped and filtered image', res);\n      const blob = await fetch(res.preview).then((r) => r.blob());\n      download(blob, 'cropped_image.jpg');\n    } catch (e) {\n      console.log('error', e);\n    }\n  };\n\n  const onImgSelection = async (e) => {\n    if (e.fileList && e.fileList.length > 0) {\n      setImg(e.fileList[0].originFileObj);\n    }\n  };\n\n  const draggerProps = {\n    name: 'file',\n    multiple: false,\n    onChange: onImgSelection\n  };\n\n  return (\n    <div className='root-container'>\n      <Header />\n      <div className='content-container'>\n        {cropState && (\n          <div className='buttons-container'>\n            <Button onClick={doSomething} icon={<CheckOutlined />}>\n              Done\n            </Button>\n            <Button\n              onClick={() => {\n                cropperRef.current.backToCrop();\n              }}\n            >\n              Back\n            </Button>\n            <Button\n              onClick={() => {\n                setImg(undefined);\n                setCropState();\n              }}\n            >\n              Reset\n            </Button>\n            <Button>\n              onClick={() => {\n                const canvas = cropperRef.current.cropCanvas;\n                if (canvas) {\n                  canvas.toBlob((blob) => {\n                    if (!blob) {\n                      throw new Error('Failed to create blob');\n                    }\n                    download(blob, 'cropped_image.jpg');\n                  });\n                }\n              }}\n            \n              Download Crop\n            </Button>\n          </div>\n        )}\n\n        <Cropper\n          openCvPath='./opencv/opencv.js'\n          ref={cropperRef}\n          image={img}\n          onChange={onChange}\n          onDragStop={onDragStop}\n          maxWidth={window.innerWidth - 10}\n        />\n        \n        {cropState?.loading && <Spin />}\n        {!img && (\n          <Dragger {...draggerProps}>\n            <p>\n              <PlusOutlined />\n            </p>\n            <p>Upload</p>\n          </Dragger>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}