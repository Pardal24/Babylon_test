{"ast":null,"code":"var _jsxFileName = \"/home/fpardal/Desktop/cropper/src/lib/Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useImperativeHandle, useRef, useState, Fragment } from 'react';\nimport { useOpenCv } from 'opencv-react';\nimport T from 'prop-types';\nimport { calcDims, readFile, isCrossOriginURL } from '../lib/utils';\nimport CropPoints from '../lib/CropPoints';\nimport { applyFilter, transform } from '../lib/imgManipulation';\nimport CropPointsDelimiters from './CropPointsDelimiters';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst buildImgContainerStyle = previewDims => ({\n  width: previewDims.width,\n  height: previewDims.height\n});\nconst imageDimensions = {\n  width: 0,\n  height: 0\n};\nlet imageResizeRatio;\nconst Canvas = _ref => {\n  _s();\n  var _previewCanvasRef$cur, _previewCanvasRef$cur2, _previewCanvasRef$cur3, _previewCanvasRef$cur4, _previewCanvasRef$cur5, _previewCanvasRef$cur6;\n  let {\n    image,\n    onDragStop,\n    onChange,\n    cropperRef,\n    pointSize = 30,\n    lineWidth,\n    pointBgColor,\n    pointBorder,\n    lineColor,\n    maxWidth,\n    maxHeight\n  } = _ref;\n  const {\n    loaded: cvLoaded,\n    cv\n  } = useOpenCv();\n  const canvasRef = useRef();\n  const previewCanvasRef = useRef();\n  const magnifierCanvasRef = useRef();\n  const [previewDims, setPreviewDims] = useState();\n  const [cropPoints, setCropPoints] = useState();\n  const [loading, setLoading] = useState(false);\n  const [mode, setMode] = useState('crop');\n  useImperativeHandle(cropperRef, () => ({\n    backToCrop: () => {\n      setMode('crop');\n    },\n    done: async function () {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new Promise(resolve => {\n        setLoading(true);\n        transform(cv, canvasRef.current, cropPoints, imageResizeRatio, setPreviewPaneDimensions);\n        //applyFilter(cv, canvasRef.current, opts.filterCvParams)\n        if (opts.preview) {\n          setMode('preview');\n        }\n        canvasRef.current.toBlob(blob => {\n          blob.name = image.name;\n          resolve(blob);\n          setLoading(false);\n        }, image.type);\n      });\n    }\n  }));\n  useEffect(() => {\n    if (mode === 'preview') {\n      showPreview();\n    }\n  }, [mode]);\n  const setPreviewPaneDimensions = () => {\n    // set preview pane dimensions\n    const newPreviewDims = calcDims(canvasRef.current.width * 0.7, canvasRef.current.height * 0.7, maxWidth, maxHeight);\n    setPreviewDims(newPreviewDims);\n    previewCanvasRef.current.width = newPreviewDims.width;\n    previewCanvasRef.current.height = newPreviewDims.height;\n    imageResizeRatio = newPreviewDims.width / canvasRef.current.width;\n  };\n  const createCanvas = src => {\n    return new Promise((resolve, reject) => {\n      const img = document.createElement('img');\n      img.onload = async () => {\n        // set edited image canvas and dimensions\n        canvasRef.current = document.createElement('canvas');\n        canvasRef.current.width = img.width;\n        canvasRef.current.height = img.height;\n        const ctx = canvasRef.current.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        imageDimensions.width = canvasRef.current.width;\n        imageDimensions.height = canvasRef.current.height;\n        setPreviewPaneDimensions();\n        resolve();\n      };\n      if (isCrossOriginURL(src)) img.crossOrigin = \"anonymous\";\n      img.src = src;\n    });\n  };\n  const showPreview = image => {\n    const src = image || cv.imread(canvasRef.current);\n    const dst = new cv.Mat();\n    const dsize = new cv.Size(0, 0);\n    cv.resize(src, dst, dsize, imageResizeRatio, imageResizeRatio, cv.INTER_AREA);\n    cv.imshow(previewCanvasRef.current, dst);\n    src.delete();\n    dst.delete();\n  };\n  const detectContours = () => {\n    const dst = cv.imread(canvasRef.current);\n    const ksize = new cv.Size(5, 5);\n    // convert the image to grayscale, blur it, and find edges in the image\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\n    cv.Canny(dst, dst, 75, 200);\n    // find contours\n    cv.threshold(dst, dst, 120, 200, cv.THRESH_BINARY);\n    const contours = new cv.MatVector();\n    const hierarchy = new cv.Mat();\n    cv.findContours(dst, contours, hierarchy, cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE);\n    const rect = cv.boundingRect(dst);\n    dst.delete();\n    hierarchy.delete();\n    contours.delete();\n    // transform the rectangle into a set of points\n    Object.keys(rect).forEach(key => {\n      rect[key] = rect[key] * imageResizeRatio;\n    });\n    const contourCoordinates = {\n      'left-top': {\n        x: rect.x,\n        y: rect.y\n      },\n      'right-top': {\n        x: rect.x + rect.width,\n        y: rect.y\n      },\n      'right-bottom': {\n        x: rect.x + rect.width,\n        y: rect.y + rect.height\n      },\n      'left-bottom': {\n        x: rect.x,\n        y: rect.y + rect.height\n      }\n    };\n    setCropPoints(contourCoordinates);\n  };\n  const clearMagnifier = () => {\n    const magnCtx = magnifierCanvasRef.current.getContext('2d');\n    magnCtx.clearRect(0, 0, magnifierCanvasRef.current.width, magnifierCanvasRef.current.height);\n  };\n  useEffect(() => {\n    if (onChange) {\n      onChange({\n        ...cropPoints,\n        loading\n      });\n    }\n  }, [cropPoints, loading]);\n  useEffect(() => {\n    const bootstrap = async () => {\n      const src = await readFile(image);\n      await createCanvas(src);\n      showPreview();\n      detectContours();\n      setLoading(false);\n    };\n    if (image && previewCanvasRef.current && cvLoaded && mode === 'crop') {\n      bootstrap();\n    } else {\n      setLoading(true);\n    }\n  }, [image, previewCanvasRef.current, cvLoaded, mode]);\n  const onDrag = useCallback((position, area) => {\n    const {\n      x,\n      y\n    } = position;\n    const magnCtx = magnifierCanvasRef.current.getContext('2d');\n    clearMagnifier();\n\n    // TODO we should make those 5, 10 and 20 values proportionate\n    // to the point size\n    magnCtx.drawImage(previewCanvasRef.current, x - (pointSize - 10), y - (pointSize - 10), pointSize + 5, pointSize + 5, x + 10, y - 90, pointSize + 20, pointSize + 20);\n    setCropPoints(cPs => ({\n      ...cPs,\n      [area]: {\n        x,\n        y\n      }\n    }));\n  }, []);\n  const onStop = useCallback((position, area, cropPoints) => {\n    const {\n      x,\n      y\n    } = position;\n    clearMagnifier();\n    setCropPoints(cPs => ({\n      ...cPs,\n      [area]: {\n        x,\n        y\n      }\n    }));\n    if (onDragStop) {\n      onDragStop({\n        ...cropPoints,\n        [area]: {\n          x,\n          y\n        }\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      ...(previewDims && buildImgContainerStyle(previewDims))\n    },\n    children: [previewDims && mode === 'crop' && cropPoints && /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CropPoints, {\n        pointSize: pointSize,\n        pointBgColor: pointBgColor,\n        pointBorder: pointBorder,\n        cropPoints: cropPoints,\n        previewDims: previewDims,\n        onDrag: onDrag,\n        onStop: onStop,\n        bounds: {\n          left: (previewCanvasRef === null || previewCanvasRef === void 0 ? void 0 : (_previewCanvasRef$cur = previewCanvasRef.current) === null || _previewCanvasRef$cur === void 0 ? void 0 : _previewCanvasRef$cur.offsetLeft) - pointSize / 2,\n          top: (previewCanvasRef === null || previewCanvasRef === void 0 ? void 0 : (_previewCanvasRef$cur2 = previewCanvasRef.current) === null || _previewCanvasRef$cur2 === void 0 ? void 0 : _previewCanvasRef$cur2.offsetTop) - pointSize / 2,\n          right: (previewCanvasRef === null || previewCanvasRef === void 0 ? void 0 : (_previewCanvasRef$cur3 = previewCanvasRef.current) === null || _previewCanvasRef$cur3 === void 0 ? void 0 : _previewCanvasRef$cur3.offsetLeft) - pointSize / 2 + (previewCanvasRef === null || previewCanvasRef === void 0 ? void 0 : (_previewCanvasRef$cur4 = previewCanvasRef.current) === null || _previewCanvasRef$cur4 === void 0 ? void 0 : _previewCanvasRef$cur4.offsetWidth),\n          bottom: (previewCanvasRef === null || previewCanvasRef === void 0 ? void 0 : (_previewCanvasRef$cur5 = previewCanvasRef.current) === null || _previewCanvasRef$cur5 === void 0 ? void 0 : _previewCanvasRef$cur5.offsetTop) - pointSize / 2 + (previewCanvasRef === null || previewCanvasRef === void 0 ? void 0 : (_previewCanvasRef$cur6 = previewCanvasRef.current) === null || _previewCanvasRef$cur6 === void 0 ? void 0 : _previewCanvasRef$cur6.offsetHeight)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CropPointsDelimiters, {\n        previewDims: previewDims,\n        cropPoints: cropPoints,\n        lineWidth: lineWidth,\n        lineColor: lineColor,\n        pointSize: pointSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        style: {\n          position: 'absolute',\n          zIndex: 5,\n          pointerEvents: 'none'\n        },\n        width: previewDims.width,\n        height: previewDims.height,\n        ref: magnifierCanvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      style: {\n        zIndex: 5,\n        pointerEvents: 'none'\n      },\n      ref: previewCanvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"SB/Q6QeoFCdJ3T5F9NMxzdzavjA=\", false, function () {\n  return [useOpenCv];\n});\n_c = Canvas;\nexport default Canvas;\nCanvas.propTypes = {\n  image: T.object.isRequired,\n  onDragStop: T.func,\n  onChange: T.func,\n  cropperRef: T.shape({\n    current: T.shape({\n      done: T.func.isRequired,\n      backToCrop: T.func.isRequired\n    })\n  }),\n  pointSize: T.number,\n  lineWidth: T.number,\n  pointBgColor: T.string,\n  pointBorder: T.string,\n  lineColor: T.string\n};\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useCallback","useEffect","useImperativeHandle","useRef","useState","Fragment","useOpenCv","T","calcDims","readFile","isCrossOriginURL","CropPoints","applyFilter","transform","CropPointsDelimiters","jsxDEV","_jsxDEV","buildImgContainerStyle","previewDims","width","height","imageDimensions","imageResizeRatio","Canvas","_ref","_s","_previewCanvasRef$cur","_previewCanvasRef$cur2","_previewCanvasRef$cur3","_previewCanvasRef$cur4","_previewCanvasRef$cur5","_previewCanvasRef$cur6","image","onDragStop","onChange","cropperRef","pointSize","lineWidth","pointBgColor","pointBorder","lineColor","maxWidth","maxHeight","loaded","cvLoaded","cv","canvasRef","previewCanvasRef","magnifierCanvasRef","setPreviewDims","cropPoints","setCropPoints","loading","setLoading","mode","setMode","backToCrop","done","opts","arguments","length","undefined","Promise","resolve","current","setPreviewPaneDimensions","preview","toBlob","blob","name","type","showPreview","newPreviewDims","createCanvas","src","reject","img","document","createElement","onload","ctx","getContext","drawImage","crossOrigin","imread","dst","Mat","dsize","Size","resize","INTER_AREA","imshow","delete","detectContours","ksize","cvtColor","COLOR_RGBA2GRAY","GaussianBlur","BORDER_DEFAULT","Canny","threshold","THRESH_BINARY","contours","MatVector","hierarchy","findContours","RETR_CCOMP","CHAIN_APPROX_SIMPLE","rect","boundingRect","Object","keys","forEach","key","contourCoordinates","x","y","clearMagnifier","magnCtx","clearRect","bootstrap","onDrag","position","area","cPs","onStop","style","children","bounds","left","offsetLeft","top","offsetTop","right","offsetWidth","bottom","offsetHeight","fileName","_jsxFileName","lineNumber","columnNumber","zIndex","pointerEvents","ref","_c","propTypes","object","isRequired","func","shape","number","string","$RefreshReg$"],"sources":["/home/fpardal/Desktop/cropper/src/lib/Canvas.js"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n  Fragment\n} from 'react'\nimport { useOpenCv } from 'opencv-react'\nimport T from 'prop-types'\nimport { calcDims, readFile, isCrossOriginURL } from '../lib/utils'\nimport CropPoints from '../lib/CropPoints'\nimport { applyFilter, transform } from '../lib/imgManipulation'\nimport CropPointsDelimiters from './CropPointsDelimiters'\n\nconst buildImgContainerStyle = (previewDims) => ({\n  width: previewDims.width,\n  height: previewDims.height\n})\n\nconst imageDimensions = { width: 0, height: 0 }\nlet imageResizeRatio\n\nconst Canvas = ({\n  image,\n  onDragStop,\n  onChange,\n  cropperRef,\n  pointSize = 30,\n  lineWidth,\n  pointBgColor,\n  pointBorder,\n  lineColor,\n  maxWidth,\n  maxHeight\n}) => {\n  const { loaded: cvLoaded, cv } = useOpenCv()\n  const canvasRef = useRef()\n  const previewCanvasRef = useRef()\n  const magnifierCanvasRef = useRef()\n  const [previewDims, setPreviewDims] = useState()\n  const [cropPoints, setCropPoints] = useState()\n  const [loading, setLoading] = useState(false)\n  const [mode, setMode] = useState('crop')\n\n  useImperativeHandle(cropperRef, () => ({\n    backToCrop: () => {\n      setMode('crop')\n    },\n    done: async (opts = {}) => {\n      return new Promise((resolve) => {\n        setLoading(true)\n        transform(\n          cv,\n          canvasRef.current,\n          cropPoints,\n          imageResizeRatio,\n          setPreviewPaneDimensions\n        )\n        //applyFilter(cv, canvasRef.current, opts.filterCvParams)\n        if (opts.preview) {\n          setMode('preview')\n        }\n        canvasRef.current.toBlob((blob) => {\n          blob.name = image.name\n          resolve(blob)\n          setLoading(false)\n        }, image.type)\n      })\n    }\n  }))\n\n  useEffect(() => {\n    if (mode === 'preview') {\n      showPreview()\n    }\n  }, [mode])\n\n  const setPreviewPaneDimensions = () => {\n    // set preview pane dimensions\n    const newPreviewDims = calcDims(\n      canvasRef.current.width * 0.7,\n      canvasRef.current.height * 0.7,\n      maxWidth,\n      maxHeight\n    )\n    setPreviewDims(newPreviewDims)\n\n    previewCanvasRef.current.width = newPreviewDims.width\n    previewCanvasRef.current.height = newPreviewDims.height\n\n    imageResizeRatio = newPreviewDims.width / canvasRef.current.width\n  }\n\n  const createCanvas = (src) => {\n    return new Promise((resolve, reject) => {\n      const img = document.createElement('img')\n      img.onload = async () => {\n        // set edited image canvas and dimensions\n        canvasRef.current = document.createElement('canvas')\n        canvasRef.current.width = img.width\n        canvasRef.current.height = img.height\n        const ctx = canvasRef.current.getContext('2d')\n        ctx.drawImage(img, 0, 0)\n        imageDimensions.width = canvasRef.current.width\n        imageDimensions.height = canvasRef.current.height\n        setPreviewPaneDimensions()\n        resolve()\n      }\n      if (isCrossOriginURL(src)) img.crossOrigin = \"anonymous\"\n      img.src = src\n    })\n  }\n\n  const showPreview = (image) => {\n    const src = image || cv.imread(canvasRef.current)\n    const dst = new cv.Mat()\n    const dsize = new cv.Size(0, 0)\n    cv.resize(\n      src,\n      dst,\n      dsize,\n      imageResizeRatio,\n      imageResizeRatio,\n      cv.INTER_AREA\n    )\n    cv.imshow(previewCanvasRef.current, dst)\n    src.delete()\n    dst.delete()\n  }\n\n  const detectContours = () => {\n    const dst = cv.imread(canvasRef.current)\n    const ksize = new cv.Size(5, 5)\n    // convert the image to grayscale, blur it, and find edges in the image\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0)\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT)\n    cv.Canny(dst, dst, 75, 200)\n    // find contours\n    cv.threshold(dst, dst, 120, 200, cv.THRESH_BINARY)\n    const contours = new cv.MatVector()\n    const hierarchy = new cv.Mat()\n    cv.findContours(\n      dst,\n      contours,\n      hierarchy,\n      cv.RETR_CCOMP,\n      cv.CHAIN_APPROX_SIMPLE\n    )\n    const rect = cv.boundingRect(dst)\n    dst.delete()\n    hierarchy.delete()\n    contours.delete()\n    // transform the rectangle into a set of points\n    Object.keys(rect).forEach((key) => {\n      rect[key] = rect[key] * imageResizeRatio\n    })\n\n    const contourCoordinates = {\n      'left-top': { x: rect.x, y: rect.y },\n      'right-top': { x: rect.x + rect.width, y: rect.y },\n      'right-bottom': {\n        x: rect.x + rect.width,\n        y: rect.y + rect.height\n      },\n      'left-bottom': { x: rect.x, y: rect.y + rect.height }\n    }\n\n    setCropPoints(contourCoordinates)\n  }\n\n  const clearMagnifier = () => {\n    const magnCtx = magnifierCanvasRef.current.getContext('2d')\n    magnCtx.clearRect(\n      0,\n      0,\n      magnifierCanvasRef.current.width,\n      magnifierCanvasRef.current.height\n    )\n  }\n\n  useEffect(() => {\n    if (onChange) {\n      onChange({ ...cropPoints, loading })\n    }\n  }, [cropPoints, loading])\n\n  useEffect(() => {\n    const bootstrap = async () => {\n      const src = await readFile(image)\n      await createCanvas(src)\n      showPreview()\n      detectContours()\n      setLoading(false)\n    }\n\n    if (image && previewCanvasRef.current && cvLoaded && mode === 'crop') {\n      bootstrap()\n    } else {\n      setLoading(true)\n    }\n  }, [image, previewCanvasRef.current, cvLoaded, mode])\n\n  const onDrag = useCallback((position, area) => {\n    const { x, y } = position\n\n    const magnCtx = magnifierCanvasRef.current.getContext('2d')\n    clearMagnifier()\n\n    // TODO we should make those 5, 10 and 20 values proportionate\n    // to the point size\n    magnCtx.drawImage(\n      previewCanvasRef.current,\n      x - (pointSize - 10),\n      y - (pointSize - 10),\n      pointSize + 5,\n      pointSize + 5,\n      x + 10,\n      y - 90,\n      pointSize + 20,\n      pointSize + 20\n    )\n\n    setCropPoints((cPs) => ({ ...cPs, [area]: { x, y } }))\n  }, [])\n\n  const onStop = useCallback((position, area, cropPoints) => {\n    const { x, y } = position\n    clearMagnifier()\n    setCropPoints((cPs) => ({ ...cPs, [area]: { x, y } }))\n    if (onDragStop) {\n      onDragStop({ ...cropPoints, [area]: { x, y } })\n    }\n  }, [])\n\n  return (\n    <div\n      style={{\n        position: 'relative',\n        ...(previewDims && buildImgContainerStyle(previewDims))\n      }}\n    >\n      {previewDims && mode === 'crop' && cropPoints && (\n        <Fragment>\n          <CropPoints\n            pointSize={pointSize}\n            pointBgColor={pointBgColor}\n            pointBorder={pointBorder}\n            cropPoints={cropPoints}\n            previewDims={previewDims}\n            onDrag={onDrag}\n            onStop={onStop}\n            bounds={{\n              left: previewCanvasRef?.current?.offsetLeft - pointSize / 2,\n              top: previewCanvasRef?.current?.offsetTop - pointSize / 2,\n              right:\n                previewCanvasRef?.current?.offsetLeft -\n                pointSize / 2 +\n                previewCanvasRef?.current?.offsetWidth,\n              bottom:\n                previewCanvasRef?.current?.offsetTop -\n                pointSize / 2 +\n                previewCanvasRef?.current?.offsetHeight\n            }}\n          />\n          <CropPointsDelimiters\n            previewDims={previewDims}\n            cropPoints={cropPoints}\n            lineWidth={lineWidth}\n            lineColor={lineColor}\n            pointSize={pointSize}\n          />\n          <canvas\n            style={{\n              position: 'absolute',\n              zIndex: 5,\n              pointerEvents: 'none'\n            }}\n            width={previewDims.width}\n            height={previewDims.height}\n            ref={magnifierCanvasRef}\n          />\n        </Fragment>\n      )}\n\n      <canvas\n        style={{ zIndex: 5, pointerEvents: 'none' }}\n        ref={previewCanvasRef}\n      />\n    </div>\n  )\n}\n\nexport default Canvas\n\nCanvas.propTypes = {\n  image: T.object.isRequired,\n  onDragStop: T.func,\n  onChange: T.func,\n  cropperRef: T.shape({\n    current: T.shape({\n      done: T.func.isRequired,\n      backToCrop: T.func.isRequired\n    })\n  }),\n  pointSize: T.number,\n  lineWidth: T.number,\n  pointBgColor: T.string,\n  pointBorder: T.string,\n  lineColor: T.string\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}